#!/usr/bin/env python3
"""
test_scraper.py - スクレイパーのテストスクリプト
"""
import json
from carwow_scraper import CarwowScraper
from data_processor import DataProcessor

def test_single_vehicle(slug: str):
    """単一車両をテスト"""
    print(f"\n{'='*60}")
    print(f"Testing: {slug}")
    print('='*60)
    
    scraper = CarwowScraper()
    processor = DataProcessor()
    
    # スクレイピング
    raw_data = scraper.scrape_vehicle(slug)
    
    if not raw_data:
        print("ERROR: Failed to scrape vehicle")
        return
    
    # 基本情報を表示
    print(f"Make: {raw_data['make_en']}")
    print(f"Model: {raw_data['model_en']}")
    print(f"Overview: {raw_data['overview_en'][:100]}...")
    print(f"Body Types: {raw_data['body_types']}")
    print(f"Prices: {raw_data['prices']}")
    print(f"Colors: {raw_data['colors']}")
    print(f"Media URLs: {len(raw_data['media_urls'])} images")
    
    # グレード・エンジン情報を表示
    print(f"\nGrades/Engines ({len(raw_data['grades_engines'])} combinations):")
    for ge in raw_data['grades_engines']:
        print(f"  - Grade: {ge['grade']}, Engine: {ge['engine']}")
        print(f"    Price: £{ge.get('engine_price_gbp', 'N/A')}")
        print(f"    Fuel: {ge['fuel']}, Trans: {ge['transmission']}")
        print(f"    Power: {ge.get('power_bhp', 'N/A')} bhp")
    
    # 仕様を表示
    print(f"\nSpecifications:")
    specs = raw_data['specifications']
    for key, value in specs.items():
        print(f"  - {key}: {value}")
    
    # データ処理
    records = processor.process_vehicle_data(raw_data)
    print(f"\nProcessed into {len(records)} database records")
    
    # 最初のレコードを詳細表示
    if records:
        print("\nFirst record sample:")
        record = records[0]
        for key in ['id', 'full_model_ja', 'engine_price_gbp', 'engine_price_jpy']:
            print(f"  - {key}: {record.get(key)}")
    
    return raw_data

def test_maker_models(maker: str, limit: int = 3):
    """メーカーのモデル一覧をテスト"""
    print(f"\n{'='*60}")
    print(f"Testing maker: {maker}")
    print('='*60)
    
    scraper = CarwowScraper()
    models = scraper.get_models_for_maker(maker)
    
    print(f"Found {len(models)} models")
    for i, model in enumerate(models[:10]):
        print(f"  {i+1}. {model}")
    
    # 最初の数モデルを詳細テスト
    for model in models[:limit]:
        test_single_vehicle(model)

def test_all_makers():
    """全メーカー一覧をテスト"""
    print(f"\n{'='*60}")
    print("Testing all makers")
    print('='*60)
    
    scraper = CarwowScraper()
    makers = scraper.get_all_makers()
    
    print(f"Found {len(makers)} makers:")
    for i, maker in enumerate(makers):
        print(f"  {i+1:2d}. {maker}")
    
    return makers

def main():
    """メインテスト実行"""
    print("Carwow Scraper Test Suite")
    print("="*60)
    
    # 1. 特定の車両をテスト
    test_vehicles = [
        "abarth/500e",
        "abarth/500e-cabrio",
        "audi/a4",
        "bmw/3-series",
        "tesla/model-3"
    ]
    
    for slug in test_vehicles[:2]:  # 最初の2台のみテスト
        try:
            data = test_single_vehicle(slug)
            
            # データをJSONファイルに保存
            filename = f"test_{slug.replace('/', '_')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"\nSaved to {filename}")
            
        except Exception as e:
            print(f"ERROR testing {slug}: {e}")
    
    # 2. メーカー一覧をテスト
    # makers = test_all_makers()
    
    # 3. 特定メーカーのモデルをテスト
    # test_maker_models("audi", limit=2)
    
    print("\n" + "="*60)
    print("Test completed!")

if __name__ == "__main__":
    main()
