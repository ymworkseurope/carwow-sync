name: Daily Carwow Sync

on:
  schedule:
    # 日本時間 02:00（UTC 17:00 前日）
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      makers:
        description: 'Specific makers to process (space-separated)'
        required: false
        default: ''
      limit:
        description: 'Limit number of vehicles to process'
        required: false
        default: ''
      test_mode:
        description: 'Run in test mode (process only 5 vehicles)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  sync:
    runs-on: ubuntu-latest
    # タイムアウトを動的に設定（テストモード: 60分、通常: 180分）
    timeout-minutes: ${{ github.event.inputs.test_mode == 'true' && 60 || 180 }}
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      GS_CREDS_JSON: ${{ secrets.GS_CREDS_JSON }}
      GS_SHEET_ID: ${{ secrets.GS_SHEET_ID }}
      DEEPL_KEY: ${{ secrets.DEEPL_KEY }}
      FALLBACK_EXCHANGE_RATE: ${{ secrets.FALLBACK_EXCHANGE_RATE || '185.0' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create cache files
      run: |
        touch body_type_cache.json
        touch translation_cache.json
        touch exchange_rate_cache.json
        touch deepl_quota.json
        touch sync.log
    
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: |
          body_type_cache.json
          translation_cache.json
          exchange_rate_cache.json
          deepl_quota.json
        key: carwow-cache-${{ runner.os }}-${{ github.run_number }}
        restore-keys: |
          carwow-cache-${{ runner.os }}-
    
    - name: Prepare arguments
      id: prepare
      run: |
        ARGS=""
        
        # Test mode
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          ARGS="$ARGS --test"
        fi
        
        # Limit
        if [ -n "${{ github.event.inputs.limit }}" ]; then
          ARGS="$ARGS --limit ${{ github.event.inputs.limit }}"
        fi
        
        # Makers
        if [ -n "${{ github.event.inputs.makers }}" ]; then
          ARGS="$ARGS --makers ${{ github.event.inputs.makers }}"
        fi
        
        echo "args=$ARGS" >> $GITHUB_OUTPUT
    
    - name: Run sync
      run: |
        echo "Starting sync at $(date)"
        python sync_manager.py ${{ steps.prepare.outputs.args }} 2>&1 | tee sync.log
        echo "Sync completed at $(date)"
    
    - name: Save cache
      if: always()
      uses: actions/cache@v3
      with:
        path: |
          body_type_cache.json
          translation_cache.json
          exchange_rate_cache.json
          deepl_quota.json
        key: carwow-cache-${{ runner.os }}-${{ github.run_number }}
    
    - name: Upload logs and cache
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-logs-${{ github.run_number }}
        path: |
          sync.log
          body_type_cache.json
          translation_cache.json
          exchange_rate_cache.json
          deepl_quota.json
        retention-days: 7
        if-no-files-found: warn
    
    - name: Send notification on failure
      if: failure()
      run: |
        echo "Sync failed! Check the logs for details."
        # ここに通知サービス（Slack、Discord等）への通知コードを追加可能
